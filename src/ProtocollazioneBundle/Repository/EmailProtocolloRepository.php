<?php

namespace ProtocollazioneBundle\Repository;

use ProtocollazioneBundle\Entity\EmailProtocollo;
use ProtocollazioneBundle\Service\DocERCronjobService;

/**
 * EmailProtocolloRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmailProtocolloRepository extends \Doctrine\ORM\EntityRepository {

    public function getEmailProtocolloDaInviare($lotto = 100, $ids = array()) {

        $where = "ep.stato = '" . EmailProtocollo::DA_INVIARE . "'"
                . " AND rp.stato = '" . DocERCronjobService::POST_PROTOCOLLAZIONE . "'";

        if (count($ids) > 0) {
            $where .= " AND ep.id NOT IN (" . implode(",", $ids) . ")";
        }

        $query = "SELECT ep FROM ProtocollazioneBundle:EmailProtocollo ep "
                . "JOIN ep.richiestaProtocollo rp "
                . "WHERE $where";

        $q = $this->getEntityManager()->createQuery($query);
        $q->setMaxResults($lotto);
        $res = $q->getResult();

        return $res;
    }

    public function getEmailProtocolloDaSincronizzare($lotto = 100, $ids = array()) {

        $where = "ep.stato = '" . EmailProtocollo::INVIATA . "'";


        if (count($ids) > 0) {
            $where .= " AND ep.id NOT IN (" . implode(",", $ids) . ")";
        }

        $query = "SELECT ep FROM ProtocollazioneBundle:EmailProtocollo ep "
                . "WHERE $where";

        $q = $this->getEntityManager()->createQuery($query);
        $q->setMaxResults($lotto);
        $res = $q->getResult();

        return $res;
    }

    public function getEmailProtocolloDaNonInviare() {

        $now = new \DateTime();
        $limit = $now->modify('-1 months');
        $limitS = $limit->format('Y-m-d 00:00:00');

        $where = "ep.stato = '" . EmailProtocollo::DA_INVIARE . "'";
        $where .= " AND ep.data_creazione < '$limitS'";

        $query = "SELECT ep FROM ProtocollazioneBundle:EmailProtocollo ep "
                . "JOIN ep.richiestaProtocollo rp "
                . "WHERE $where";

        $q = $this->getEntityManager()->createQuery($query);
        $res = $q->getResult();

        return $res;
    }
    
    public function getEmailProtocolloDaNonSincronizzare() {

        $now = new \DateTime();
        $limit = $now->modify('-1 months');
        $limitS = $limit->format('Y-m-d 00:00:00');
        
        $where = "ep.stato = '" . EmailProtocollo::INVIATA . "'";
        $where .= " AND ep.data_creazione < '$limitS'";

        $query = "SELECT ep FROM ProtocollazioneBundle:EmailProtocollo ep "
                . "WHERE $where";

        $q = $this->getEntityManager()->createQuery($query);
        $res = $q->getResult();

        return $res;
    }

}
