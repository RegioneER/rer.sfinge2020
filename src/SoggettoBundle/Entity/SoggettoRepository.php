<?php

namespace SoggettoBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use RichiesteBundle\GestoriRichieste\GestoreRichiesteBando_133;
use RichiesteBundle\GestoriRichieste\GestoreRichiesteBando_134;
use RichiesteBundle\GestoriRichieste\GestoreRichiesteBando_136;
use RichiesteBundle\GestoriRichieste\GestoreRichiesteBando_138;
use RichiesteBundle\GestoriRichieste\GestoreRichiesteBando_139;
use RichiesteBundle\GestoriRichieste\GestoreRichiesteBando_149;
use RichiesteBundle\GestoriRichieste\GestoreRichiesteBando_150;
use RichiesteBundle\GestoriRichieste\GestoreRichiesteBando_151;
use RichiesteBundle\GestoriRichieste\GestoreRichiesteBando_163;
use RichiesteBundle\GestoriRichieste\GestoreRichiesteBando_174;
use SfingeBundle\Entity\Procedura;
use function is_null;
use RichiesteBundle\Ricerche\RicercaSoggettoProponente;
use SoggettoBundle\Form\Entity\RicercaSoggetto;
use SoggettoBundle\Form\Entity\RicercaSoggettoGiuridico;

/**
 * SoggettoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SoggettoRepository extends EntityRepository {

    /**
     * Metodo che a partire da una persona con annesso incarico e un determinato contesto rende la lista dei soggetti
     * per cui puo operare
     * @param RicercaSoggetto
     * @return Query
     */
    public function cercaDaPersonaIncarico(RicercaSoggetto $ricercaSoggetto) {
        $dql = "SELECT s FROM SoggettoBundle:Soggetto s
              JOIN s.incarichi_persone ip
              JOIN ip.incaricato p
              JOIN ip.stato si
              WHERE s INSTANCE OF SoggettoBundle:Soggetto
              AND si.codice = :codiceAttivo ";

        if (!is_null($ricercaSoggetto->getIncarico())) {
            $dql .= "AND ip.tipoIncarico = :incarico";
        }

        $q = $this->getEntityManager()->createQuery();

        $q->setParameter("codiceAttivo", "ATTIVO");

        if (!is_null($ricercaSoggetto->getPersonaId())) {
            $dql .= " AND p.id=:personaId ";
            $q->setParameter("personaId", $ricercaSoggetto->getPersonaId());
        }

        if (!is_null($ricercaSoggetto->getIncarico())) {
            $q->setParameter("incarico", $ricercaSoggetto->getIncarico());
        }

        if ($ricercaSoggetto->getDenominazione() != "") {
            $dql .= " AND s.denominazione LIKE :denominazione";
            $q->setParameter("denominazione", "%" . $ricercaSoggetto->getDenominazione() . "%");
        }
        if ($ricercaSoggetto->getCodiceFiscale() != "") {
            $dql .= " AND s.codice_fiscale = :codice_fiscale";
            $q->setParameter("codice_fiscale", $ricercaSoggetto->getCodiceFiscale());
        }
        if ($ricercaSoggetto->getPartitaIva() != "") {
            $dql .= " AND s.partita_iva = :partita_iva";
            $q->setParameter("partita_iva", $ricercaSoggetto->getPartitaIva());
        }
        if (!is_null($ricercaSoggetto->getDataCostituzioneA())) {
            $dql .= " AND s.data_costituzione <= :data_costituzione_a";
            $q->setParameter("data_costituzione_a", $ricercaSoggetto->getDataCostituzioneA());
        }
        if (!is_null($ricercaSoggetto->getDataCostituzioneDa())) {
            $dql .= " AND s.data_costituzione >= :data_costituzione_da";
            $q->setParameter("data_costituzione_da", $ricercaSoggetto->getDataCostituzioneDa());
        }

        $q->setDQL($dql);

        return $q;
    }

    /**
     * Metodo che a partire da una persona con annesso incarico e un determinato contesto rende la lista dei soggetti
     * per cui puo operare
     * @param RicercaSoggetto
     * @return Query
     */
    public function cercaSoggettoGiuridicoDaPersonaIncarico(RicercaSoggettoGiuridico $ricercaSoggetto) {
        $dql = "SELECT s FROM SoggettoBundle:Soggetto s
              JOIN s.incarichi_persone ip
              JOIN ip.incaricato p
              JOIN ip.stato si
              JOIN ip.tipo_incarico tipo
              WHERE (s INSTANCE OF SoggettoBundle:Soggetto or s INSTANCE OF SoggettoBundle:Azienda or s INSTANCE OF SoggettoBundle:ComuneUnione or s INSTANCE OF SoggettoBundle:PersonaFisica)
              AND si.codice = :codiceAttivo and tipo.codice <> 'OPERATORE_RICHIESTA' ";

        if (!is_null($ricercaSoggetto->getIncarico())) {
            $dql .= "AND ip.tipoIncarico = :incarico";
        }

        $q = $this->getEntityManager()->createQuery();

        $q->setParameter("codiceAttivo", "ATTIVO");

        if (!is_null($ricercaSoggetto->getPersonaId())) {
            $dql .= " AND p.id=:personaId ";
            $q->setParameter("personaId", $ricercaSoggetto->getPersonaId());
        }

        if (!is_null($ricercaSoggetto->getIncarico())) {
            $q->setParameter("incarico", $ricercaSoggetto->getIncarico());
        }

        if ($ricercaSoggetto->getDenominazione() != "") {
            $dql .= " AND s.denominazione LIKE :denominazione";
            $q->setParameter("denominazione", "%" . $ricercaSoggetto->getDenominazione() . "%");
        }
        if ($ricercaSoggetto->getCodiceFiscale() != "") {
            $dql .= " AND s.codice_fiscale = :codice_fiscale";
            $q->setParameter("codice_fiscale", $ricercaSoggetto->getCodiceFiscale());
        }
        if ($ricercaSoggetto->getPartitaIva() != "") {
            $dql .= " AND s.partita_iva = :partita_iva";
            $q->setParameter("partita_iva", $ricercaSoggetto->getPartitaIva());
        }
        if($ricercaSoggetto->getTipo() !== 'COMUNE') {
            if (!is_null($ricercaSoggetto->getDataCostituzioneA())) {
                $dql .= " AND s.data_costituzione <= :data_costituzione_a";
                $q->setParameter("data_costituzione_a", $ricercaSoggetto->getDataCostituzioneA());
            }
            if (!is_null($ricercaSoggetto->getDataCostituzioneDa())) {
                $dql .= " AND s.data_costituzione >= :data_costituzione_da";
                $q->setParameter("data_costituzione_da", $ricercaSoggetto->getDataCostituzioneDa());
            }
        }

        switch ($ricercaSoggetto->getTipo()) {
            case "AZIENDA":
                $dql .= " AND s INSTANCE OF SoggettoBundle:Azienda";
                break;
            case "SOGGETTO":
                $dql .= " AND s NOT INSTANCE OF SoggettoBundle:Azienda AND s NOT INSTANCE OF SoggettoBundle:ComuneUnione";
                break;
            case "COMUNE":
                $dql .= " AND s INSTANCE OF SoggettoBundle:ComuneUnione";
            case "PERSONA_FISICA":
                $dql .= " AND s INSTANCE OF SoggettoBundle:PersonaFisica";
                break;
        }

        $q->setDQL($dql);

        return $q;
    }

    /**
     * Metodo che a partire da una persona con annesso incarico e un determinato contesto rende la lista dei soggetti
     * per cui puo operare
     * @param $personaId
     * @return null
     */
    public function cercaTuttiDaPersonaIncarico($personaId) {
        $dql = "SELECT s FROM SoggettoBundle:Soggetto s
              JOIN s.incarichi_persone ip
              JOIN ip.incaricato p
              JOIN ip.tipo_incarico ti
              WHERE p.id=:personaId 
              AND ti.codice IN ('OPERATORE', 'OPERATORE_RICHIESTA','CONSULENTE', 'UTENTE_PRINCIPALE', 'LR', 'DELEGATO') AND ip.stato = 1"; //stato attivo

        $q = $this->getEntityManager()->createQuery();
        $q->setParameter("personaId", $personaId);

        $q->setDQL($dql);

        return $q->getResult();
    }
    
    /**
     * Metodo che a partire da una persona con annesso incarico e un determinato contesto rende la lista dei soggetti
     * per cui puo operare ad eccezione degli operatori richiesta
     * @param $personaId
     * @return array
     */
    public function cercaTuttiDaPersonaIncaricoNoRichiesta($personaId) {
        $dql = "SELECT s.id FROM SoggettoBundle:Soggetto s
              JOIN s.incarichi_persone ip
              JOIN ip.incaricato p
              JOIN ip.tipo_incarico ti
              WHERE p.id=:personaId 
              AND ti.codice IN ('OPERATORE', 'CONSULENTE', 'UTENTE_PRINCIPALE', 'LR') AND ip.stato = 1"; //stato attivo

        $q = $this->getEntityManager()->createQuery();
        $q->setParameter("personaId", $personaId);

        $q->setDQL($dql);
        $res = $q->getResult();

        $arrayRes = array();
        foreach ($res as $r) {
            $arrayRes[] = $r['id'];
        }

        return $arrayRes;
    }

    public function getMaxCodiceOrganismo() {

        $query = "SELECT max(s.codice_organismo) FROM SoggettoBundle:Soggetto s";
        $q = $this->getEntityManager()->createQuery($query);
        $res = $q->getSingleResult();
        if (is_null($res[1])) {
            return 20000;
        }
        return $res[1];
    }

    public function getLegaleRappresentante(Soggetto $soggetto) {
        $dql = "SELECT p FROM AnagraficheBundle:Persona p
              JOIN p.incarichi_persone ip
              JOIN ip.soggetto s
              JOIN ip.tipo_incarico ti
              JOIN ip.stato si
              WHERE s.id=:soggettoId AND ti.codice = :codiceLr AND si.codice = :statoAttivo";

        $q = $this->getEntityManager()->createQuery();
        $q->setParameter("soggettoId", $soggetto->getId());
        $q->setParameter("codiceLr", TipoIncarico::LR);
        $q->setParameter("statoAttivo", StatoIncarico::ATTIVO);
        $q->setDQL($dql);

        return $q->getResult();
    }
    
    public function getLegaleRappresentanteDaConfermare(Soggetto $soggetto) {
        $dql = "SELECT p FROM AnagraficheBundle:Persona p
              JOIN p.incarichi_persone ip
              JOIN ip.soggetto s
              JOIN ip.tipo_incarico ti
              JOIN ip.stato si
              WHERE s.id=:soggettoId AND ti.codice = :codiceLr AND si.codice = :statoAttivo";

        $q = $this->getEntityManager()->createQuery();
        $q->setParameter("soggettoId", $soggetto->getId());
        $q->setParameter("codiceLr", TipoIncarico::LR);
        $q->setParameter("statoAttivo", StatoIncarico::ATTESA_CONFERMA);
        $q->setDQL($dql);

        return $q->getResult();
    }

    public function soggettoHaIncaricoAttivoAttesa($soggettoId, $codiceIncarico) {
        $dql = "SELECT ip FROM SoggettoBundle:IncaricoPersona ip
                    LEFT JOIN ip.soggetto s
                    LEFT JOIN ip.tipo_incarico ti
                    LEFT JOIN ip.stato si
                    WHERE
                    si.codice IN ('ATTIVO', 'ATTESA_CONFERMA') AND
                    s.id = :soggettoId AND
                    ti.codice = :codiceIncarico";

        $q = $this->getEntityManager()->createQuery();
        $q->setParameter("codiceIncarico", $codiceIncarico);
        $q->setParameter("soggettoId", $soggettoId);

        $q->setDQL($dql);
        $result = $q->getResult();

        return count($result) > 0 ? true : false;
    }

// Funzione che dato un tipo di codice(cf o piva), il codice ed il soggetto, verifica se tale codice è già presente in qualche soggetto/azienda.
    public function isCodicePresente($tipo, $codice, $soggetto = NULL) {
        if ($tipo == 'cf' && !is_null($soggetto) && !is_null($soggetto->getIdSfinge2013())) {
            return false;
        }
        
        $dql = "SELECT COUNT(s.id) 
        FROM SoggettoBundle:Soggetto s 
        WHERE s.codice_fiscale = CASE  WHEN :tipo = 'cf' THEN :codice ELSE s.codice_fiscale END
        AND s.partita_iva = CASE WHEN :tipo = 'cf' THEN s.partita_iva ELSE :codice END
        AND NOT s INSTANCE OF SoggettoBundle:OrganismoIntermedio
        ";

        $q = $this->getEntityManager()->createQuery();
        $q->setParameter("codice", $codice);
        $q->setParameter("tipo", $tipo);

        if ($soggetto != NULL) {
            $dql .= "AND s.id <> :soggetto_id";
            $q->setParameter("soggetto_id", $soggetto->getId());
        }

        $q->setDQL($dql);
        $result = $q->getSingleScalarResult();

        return true == $result;
    }

    public function cercaPerProponente(RicercaSoggettoProponente $dati) {
        $dql = "SELECT s FROM SoggettoBundle:Soggetto s WHERE 1=1 ";

        $q = $this->getEntityManager()->createQuery();

        if ($dati->getDenominazione() != "") {
            $dql .= " AND s.denominazione LIKE :denominazione";
        $q->setParameter("denominazione", "%" . $dati->getDenominazione() . "%");
        }
        if ($dati->getCodiceFiscale() != "") {
            $dql .= " AND s.codice_fiscale = :codice_fiscale";
        $q->setParameter("codice_fiscale", $dati->getCodiceFiscale());
        }
        if ($dati->getPartitaIva() != "") {
            $dql .= " AND s.partita_iva = :partita_iva";
        $q->setParameter("partita_iva", $dati->getPartitaIva());
        }

        $q->setDQL($dql);

        return $q;
    }

    public function getFirmatariAmmissibili(Soggetto $soggetto) {
        $dql = "SELECT p FROM AnagraficheBundle:Persona p
              JOIN p.incarichi_persone ip
              JOIN ip.soggetto s
              JOIN ip.tipo_incarico ti
              JOIN ip.stato si
              WHERE s.id=:soggettoId AND ti.codice IN (:tipiIncarico) AND si.codice = :statoAttivo";

        $q = $this->getEntityManager()->createQuery();
        $q->setParameter("soggettoId", $soggetto->getId());
        $q->setParameter("tipiIncarico", array(TipoIncarico::LR, TipoIncarico::DELEGATO));
        $q->setParameter("statoAttivo", StatoIncarico::ATTIVO);
        $q->setDQL($dql);

        return $q->getResult();
    }

    public function personaHaDelegatoOLegaleAttivoPerSoggetto($personaId, $soggettoId, $codiceIncarico) {
        $dql = "SELECT ip FROM SoggettoBundle:IncaricoPersona ip
                    LEFT JOIN ip.soggetto s
                    LEFT JOIN ip.tipo_incarico ti
                    LEFT JOIN ip.stato si
                    LEFT JOIN ip.incaricato inc
                    WHERE
                    si.codice IN ('ATTIVO') AND
                    s.id = :soggettoId AND
                    inc.id = :personaId AND 
                    ti.codice = :codiceIncarico";

        $q = $this->getEntityManager()->createQuery();
        $q->setParameter("soggettoId", $soggettoId);
        $q->setParameter("personaId", $personaId);
        $q->setParameter("codiceIncarico", $codiceIncarico);

        $q->setDQL($dql);
        $result = $q->getResult();

        return count($result) > 0 ? true : false;
    }

    public function searchSoggetto($query)
    {
        return $this->createQueryBuilder('soggetto')
            ->select('soggetto.id id', 'soggetto.denominazione text')
            ->where('soggetto.denominazione like :query', 'soggetto NOT INSTANCE OF :ooii')
            ->setParameter('query', '%' . $query . '%')
            ->setParameter('ooii', 'OOII')
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Procedura $bando
     * @param bool $senzaLifnrSap
     * @param int|null $limit
     * @return array
     */
    public function getSoggettiBando(Procedura $bando, $senzaLifnrSap = true, $limit = null)
    {
        // Il distinct serve nel caso in cui un soggetto abbia presentato più richieste di contributo.
        $dql = "SELECT 
                    DISTINCT soggetto.codice_fiscale, soggetto.id, soggetto.partita_iva, soggetto.denominazione
                FROM RichiesteBundle:Richiesta richiesta 
                JOIN richiesta.stato stato
                JOIN richiesta.proponenti proponente
                JOIN richiesta.richieste_protocollo richiesta_protocollo
                JOIN proponente.soggetto soggetto
                WHERE
                    richiesta.procedura = :idBando 
                    AND stato.codice ='PRE_PROTOCOLLATA' 
                    AND proponente.mandatario = 1 
                    AND richiesta_protocollo INSTANCE OF ProtocollazioneBundle:RichiestaProtocolloFinanziamento 
               ";

        if ($bando->getId() == 133) {
            $protocolli = GestoreRichiesteBando_133::PROTOCOLLI_RICHIESTE_APPROVATE;
        } elseif ($bando->getId() == 134) {
            $protocolli = GestoreRichiesteBando_134::PROTOCOLLI_RICHIESTE_APPROVATE;
        } elseif ($bando->getId() == 136) {
            $protocolli = GestoreRichiesteBando_136::PROTOCOLLI_RICHIESTE_APPROVATE;
        } elseif ($bando->getId() == 138) {
            $protocolli = GestoreRichiesteBando_138::PROTOCOLLI_RICHIESTE_APPROVATE;
        } elseif ($bando->getId() == 139) {
            $protocolli = GestoreRichiesteBando_139::PROTOCOLLI_RICHIESTE_APPROVATE;
        } elseif ($bando->getId() == 149) {
            $protocolli = GestoreRichiesteBando_149::PROTOCOLLI_RICHIESTE_APPROVATE;
        } elseif ($bando->getId() == 150) {
            $protocolli = GestoreRichiesteBando_150::PROTOCOLLI_RICHIESTE_APPROVATE;
        } elseif ($bando->getId() == 151) {
            $protocolli = GestoreRichiesteBando_151::PROTOCOLLI_RICHIESTE_APPROVATE;
        } elseif ($bando->getId() == 163) {
            $protocolli = GestoreRichiesteBando_163::PROTOCOLLI_RICHIESTE_APPROVATE;
        } elseif ($bando->getId() == 174) {
            $protocolli = GestoreRichiesteBando_174::PROTOCOLLI_RICHIESTE_APPROVATE;
        }

        if (!empty($protocolli)) {
            // Faccio l'implode aggiungendo gli apici ai protocolli
            $protocolli = sprintf("'%s'", implode("','", $protocolli ));
            $dql .= " AND CONCAT(richiesta_protocollo.registro_pg, '/', richiesta_protocollo.anno_pg, '/', richiesta_protocollo.num_pg) 
                        IN (" . $protocolli. ")
                        ";
        }

        if ($senzaLifnrSap) {
            $dql .= " AND soggetto.lifnr_sap IS NULL";
        } else {
            $dql .= " AND soggetto.lifnr_sap IS NOT NULL";
        }

        // Serve nei casi in cui sono presenti più protocolli (per esempio nei bandi soggetti a click-day)
        $dql .= " GROUP BY richiesta.id";

        $q = $this->getEntityManager()->createQuery();
        $q->setParameter("idBando", $bando->getId());
        if ($limit) {
            $q->setMaxResults((int) $limit);
        }

        $q->setDQL($dql);
        return $q->getResult();
    }
}
