{% extends '::base.html.twig' %}

{%  block intestazioneBreadcrumb %}{% endblock %}

{% block begin_page_level_plugin_style %}
    {# Prism is used for code highlighting #}
    <link rel="stylesheet" type="text/css" href="{{ asset('assets/plugins/prism/prism.css')}}" />
    <link href='https://fonts.googleapis.com/css?family=Source+Code+Pro:400,500,600,700' rel='stylesheet' type='text/css'>
    <script src="{{ asset('assets/plugins/prism/prism.js')}}" type="text/javascript"></script>
{% endblock %}


{% block body %}


    {% if app.environment == 'dev' %}
        <h1>
            Istruzioni Sviluppatori
        </h1>

        <h4><span class="label label-success">new</span> Nuova annotation per il controllo accesso utenti</h4>
        <p>Tramite l'annotation descritta sotto sarà possibile impedire gli accessi da url a risorse 
        private a cui altri beneficiari non possono accedere</p>
<pre>
<code class="language-php">
@ControlloAccesso(contesto="vostro contesto", classe="oggetto da ricerca", opzioni={"opzione campo di ricerca" = "valore campo di ricerca"})
</code>
</pre>
 <p>
       Un esempio nel caso in cui si voglia impedire la visulizzazione dei dati del soggetto inseriti ad un utente principale ad un altro utente principale
 </p>
 <pre>
 <code class="language-php">
 @ControlloAccesso(contesto="soggetto", classe="SoggettoBundle:Soggetto", opzioni={"id" = "id_soggetto"})
</code>
</pre>
 <p>
     Definire come contesto soggetto invoca una chiamata al metodo "controlloAccessoSoggetto" definito in BaseService. 
     E' possibile definire altri metodi per effettuare controlli diversi in funzione delle risorse da gestire.
 </p>
 
        
        <h4> Creazione file .pdf</h4>
        <p>Per crea file pdf a partire da un template Twig, è stata introdotta la libreria Dompdf e wrappata dentro il bundle PdfBundle. 
            <br> Per utilizzare il wrapper è necessario scrivere le seguenti righe di codice:</p>
<pre>
<code class="language-php">
// dati da passare al twig
$data = array(
    'dato' => 'valore',
);

$pdflib = $this->get('pdf');
$pdflib->load("SfingeBundle:pdf:richiesta-3.html.twig", $data);

// scarica il pdf con il filename passato
$pdflib->download("my-pdf-file");

// per prendere il contenuto binario del pdf
$pdf = $pdflib->binaryData();</code>
</pre>

        <p>
            I file twig devono estendere <code>base.pdf.html.twig</code>.
        </p>
<pre>
<code class="language-twig">
{{"{% extends '::base.pdf.html.twig' %}

{% block content %}

    &lt;h1&gt;Lorem ipsum&lt;/h1&gt;

    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

{% endblock %}"}}</code>
</pre>


        <h4>Gestione submit form</h4>
        <p>Per evitare problemi di posizionamento dei pulsanti a piè di pagina si consiglia di usare nel type il seguente approccio:</p>

<pre>
<code class="language-php">
class GenericoType extends CommonType {

    public function buildForm(FormBuilderInterface $builder, array $options) {

        parent::buildForm($builder, $options);

        $builder->add(
            ...
        );
        $builder->add('pulsanti', self::salva_indietro, array("url"=>$options["url_indietro"]));
    }

    public function configureOptions(OptionsResolver $resolver) {
        $resolver->setDefaults(array(
            'data_class' => 'SoggettoBundle\Entity\IncaricoPersona',
        ));

        $resolver->setRequired("url_indietro");
    }
}</code>
</pre>

        <p>Successivamente nel controller aggiungere al createForm un array di opzioni con il parametro url_indietro:</p>

<pre>
<code class="language-php">
$opzioni["url_indietro"] = $this->generateUrl("selezione_incaricato");
$form = $this->createForm("SoggettoBundle\Form\DocumentiIncaricoType", $documentiIncarico, $opzioni);</code>
</pre>

        <p>Nel caso non si abbia la necessita' del pulsante Indietro usare:</p>

<pre>
<code class="language-php">$builder->add('pulsanti', self::salva);</code>
</pre>

        <p>
            Il Type che gestisce i pulsanti Indietro e Salva prevede due opzioni "label_salva" "label_indietro" per ridefinire le Label dei pulsanti.
            Richiede un parametro "url" mandatorio che è l'url a cui il pulsante indietro punta
        </p>

        <h4>Blocchi twig riusabili</h4>
        <p>Esistono diverse funzioni twig per la visualizzazione di Entity frequentemente usate nell'applicazione.
        In \BaseBundle\TwigExtension c'è la lista di tutte le funzioni disponibili</p>
        <p>L'utilizzo dipende da come è realizzato il blocchetto stesso, tipicamente si usano in questo modo</p>

<pre>
<code class="language-twig">{{'{{ mostra_persona(incarico_persona.incaricato) }}'}}</code>
</pre>

        <h4>Download documenti</h4>
        <p>Per scaricare i documenti esistono due blocchi twig che automaticamente generano la rotta corretta per il download e mostrano i nomi corretti dei file.</p>
        <p>I due blocchi sono i seguenti:</p>

<pre>
<code class="language-twig">{{'{{ scarica_file(incarico_persona.incaricato.cartaIdentita) }}'}}</code>
</pre>

        <p>Che renderizza uno o due link al download del file, nel caso il file in oggetto sia firmato appaiono due link uno al file originale e uno al file firmato</p>
        <img src="{{ asset('assets/img/istruzioni-dev/esempio_download_firmato_1.png') }}">
        <p>Il secondo blocco permette di mostrare una riga con tutte le informazioni al file</p>

<pre>
<code class="language-twig">
{{'{{ mostra_file(incarico_persona.incaricato.cartaIdentita) }}'}}</code>
</pre>

        <img class="img-responsive" src="{{ asset('assets/img/istruzioni-dev/esempio_download_firmato_2.png') }}">

        <h4>Upload documenti</h4>
        <p>Il caricamento dei documenti viene gestito tramite il DocumentoFileType che viene mappato sull'entity DocumentoFile</p>
        <p>Questo type presenta tre opzioni "tipo", "lista_tipi" e "cf_firmatario"</p>
            <ul>
                <li><b>tipo</b> permette di indicare il codice del tipo di file o un Entity di tipo TipologiaDocumento aspettato in upload, in questo caso il tipo di documento viene renderizzato
                come un campo hidden</li>
                <li><b>lista_tipi</b> permette di indicare una array di Entity di tipo TipologiaDocumento, in questo caso nel form verrà renderizzata una select
                    con la possibilità di indicare il tipo di file caricato</li>
                <li><b>cf_firmatario</b> rappresenta il cf su cui effettuare il controllo sulla validatà della firma</li>
            </ul>
        <p>Da notare che il controllo di validatà del file avviene nella classe ValidaDocumentoValidator che controlla il mime e la dimensione in base alla tipologia di file indicata
            e, a seconda delle opzioni nel parameters.ini, la firma del file. La validità viene elabora contestualmente al <code>$form->isValid()</code> evitanto di inserire ulteriori chimate nel controller</p>
        <p>Il DocumentoFileType può essere usato stand-alone o integrato in un altro form, un esempio di utilizzo integrato si trova in caricaDocumentiIncaricoAction con il type
            DocumentiIncaricoType</p>
        <p>Il frammento del controller relativo è il seguente codice</p>

<pre>
<code class="language-php">
$documentiIncarico = new DocumentiIncarico();
if($incaricoPersona->getTipoIncarico()->uguale(TipoIncarico::LR)) {
    $opzioni["DELEGA"] = $this->trovaDaCostante("DocumentoBundle:TipologiaDocumento", TipologiaDocumento::ATTO_NOMINA_LR);
    $opzioni["cf_firmatario"] = $persona->getCodiceFiscale();
}else {
    $opzioni["DELEGA"] = $this->trovaDaCostante("DocumentoBundle:TipologiaDocumento", TipologiaDocumento::DELEGA_DELEGATO);
    $lr = $this->getEm()->getRepository("SoggettoBundle:Soggetto")->getLegaleRappresentante($soggetto);
    if(count($lr) == 0){
        return $this->addErrorRedirect("Prima di inserire una delega occorre avere un legale rappresentante attivo", "elenco_incarichi");
    }
    $opzioni["cf_firmatario"] = $lr[0]->getCodiceFiscale();
}
$opzioni["url_indietro"] = $this->generateUrl("selezione_incaricato");
$form = $this->createForm("SoggettoBundle\Form\DocumentiIncaricoType", $documentiIncarico, $opzioni);
if ($request->isMethod('POST')) {

    $form->handleRequest($request);

    if ($form->isValid()) {
        $soggetto = $this->getEm()->merge($soggetto);
        $tipoIncarico = $this->getEm()->merge($incaricoPersona->getTipoIncarico());

        $_incaricoPersona = new IncaricoPersona();
        $_incaricoPersona->setTipoIncarico($tipoIncarico);
        $_incaricoPersona->setSoggetto($soggetto);
        $_incaricoPersona->setIncaricato($persona);
        $_incaricoPersona->setStato($this->trovaDaCostante(new StatoIncarico(),StatoIncarico::ATTESA_CONFERMA));

        $documentoNomina = $this->get("documenti")->carica($documentiIncarico->getFileNomina());
        $documentoCi = $this->get("documenti")->carica($documentiIncarico->getFileCartaIdentita());

        $persona->setCartaIdentita($documentoCi);
        $_incaricoPersona->setDocumentoNomina($documentoNomina);

        $this->getEm()->persist($_incaricoPersona);
        $this->getEm()->flush();
        $this->addFlash("success","Incarico aggiunto, si ricorda che deve essere verificato e confermato da Regione");
        return $this->redirectToRoute("elenco_incarichi");
    }
}</code>
</pre>

        <p>Il file viene caricato utilizzanto la chiamata al servizio dei documenti</p>

<pre>
<code class="language-php">
$this->get("documenti")->carica($documentiIncarico->getFileNomina());</code>
</pre>

        <h4>Gestione ricerche</h4>
        <p>Nell'applicazione esiste un servizio che permette di standardizzare la ricerca. Il servizio si occupa di gestire il submit degli eventuali campi salvando in sessione i valori inserite,
            permette di avere la paginazione e infine consente all'utente di controllare il numero di elementi da mostrare</p>
        <p>Il servizio viene utilizzato nei controller in questo modo:</p>

<pre>
<code class="language-php">
public function elencoIncarichiAction() {

    $datiRicerca = new RicercaIncaricati();

    if(!$this->isSuperAdmin()) {
        $soggetto = $this->getSession()->get(self::SESSIONE_SOGGETTO);
        if (is_null($soggetto)) {
            return $this->addErrorRedirect("Soggetto non specificato", "home");
        }
        $datiRicerca->setSoggettoId($soggetto->getId());
    }

    $risultato = $this->get("ricerca")->ricerca($datiRicerca);

    return array('incarichi' => $risultato["risultato"],"form_ricerca"=>$risultato["form_ricerca"],"filtro_attivo"=>$risultato["filtro_attivo"],"is_amministratore"=>$this->isAmministratore());
 }</code>
</pre>

        <p>Il metodo ricerca del servizio accetta come parametro una classe che implemente la seguente interfaccia</p>

<pre>
<code class="language-php">
interface IAttributiRicerca
{
    /**
     * Deve ritornare il nome della classe compreso di namespace del form type che renderizza la ricerca
     * @return string
     */
    public function getType();

    /**
     * Deve ritornare il nome del repository su cui viene invocato il metodo di ricerca
     * @return string
     */
    public function getNomeRepository();

    /**
     * Deve tornare il nome del metodo nel reposotory precedente che si occupa di fare la ricerca.
     * Il metodo deve accettare il modello su cui sono mappati i dati della ricerca e restituire un istanza di Query.
     *
     * Nel caso si debbano aggiungere altri parametri alla ricerca(ex valori di default) possono essere messi come attributi
     * all'oggetto modello del form type e valorizzati nel controller o messi come attributi hidden
     * @return string
     */
    public function getNomeMetodoRepository();

    /**
     * Indica il numero di elementi per pagina da mostrare nel caso il valore sia nullo viene preso quello di default
     * settato nel parameters.ini
     * @return int|null
     */
    public function getNumeroElementiPerPagina();

    /**
     * Nome del parametro nella query url che mappa il parametro della pagina
     * @return string
     */
    public function getNomeParametroPagina();

    public function getNumeroElementi();

    public function setNumeroElementi($numero_elementi);

    public function getFiltroAttivo();

    public function setFiltroAttivo($filtro_attivo);
}</code>
</pre>

        <p>Per semplicita è stata fatta una classe astratta che già gestisce i campi di default come il numero elementi e il filtro, la classe in questione è: <code>BaseBundle\Service\AttributiRicerca</code>.</p>
        <p>Nella classe RicercaIncaricati devono essere implementati i metodi previsti dall'interfaccia e tutti gli eventuali attributi su cui mappare il form di ricerca.
            Nel caso si volesse imporre dei valori prefefiniti basta prevedere un parametro ed effettuarne il set nel controller, questi valori non devono essere per forza mappati nel type</p>

<pre>
<code class="language-php">
$datiRicerca = new RicercaIncaricati();

if(!$this->isSuperAdmin()) {
    $datiRicerca->setSoggettoId($soggetto->getId());
}</code>
</pre>
        <p>Nel caso si volesse pulire i dati di ricerca dalla sessione il servizio supporta il seguente metodo</p>

<pre>
<code class="language-php">
public function elencoIncarichiPulisciAction() {
    $this->get("ricerca")->pulisci(new RicercaIncaricati());
    return $this->redirectToRoute("elenco_incarichi");
}</code>
</pre>

        <h4>Controller annotation</h4>
        <h5>PaginaInfo</h5>
        <p>L'annotation PaginaInfo serve per definire il titolo ed un eventuale sotto titolo da renderizzare nella pagina, essa deve essere iniettata su ogno controller in questo modo</p>

<pre>
<code class="language-php">
/**
 * @PaginaInfo(titolo="Elenco incarichi",sottoTitolo="elenco delle persone incaricate per soggetto")
 */
public function elencoIncarichiAction() {</code>
</pre>

        <p>Il campo sottoTitolo può essere omesso</p>
        <h5>menuItem</h5>
        <p>L'annotation Menuitem serve per indicare l'id della voce di menu su cui verrà messo il tag "active" e quindi lasciato come aperto</p>

<pre>
<code class="language-php">
    /**
     * @Menuitem(menuAttivo = "selezioneSoggetti")
     */
    public function elencoIncarichiAction() {</code>
</pre>

        <h5>Breadcrumb</h5>
        <p>L'annotation Breadcrumb serve per indicare i path da mettere nella breadcrumb della pagina. Questa annotazione può essere associata sia alla classe del controller definendo gli elementi base
        per tutti i metodi e su ogni singolo metodo</p>
        <p>E' possibile anche indicare rotte con parametri come indicato di seguito</p>

<pre>
<code class="language-php">
    /**
     * @Breadcrumb(elementi={@ElementoBreadcrumb(testo="Gestione sedi", route="elenco_sedi_operative",parametri={"id_soggetto"}), @ElementoBreadcrumb(testo="Visualizza sede")})
     */
    public function visualizzaAziendaAction($id_soggetto, $id_sede) {</code>
</pre>


        <p>Di seguito trovi una serie di istruzioni per facilitarti lo sviluppo lato front-end della webapp.</p>
        <br>
        <div class="well well-lg">
            <div class="row">

                {# ELENCO #}
                <div class="col-sm-4 p30">
                    <h3>
                        <span class="badge badge-warning badge-lg">1</span>
                        Pagine elenco
                    </h3>
                    <div class="thumbnail">
                        <img class="img-responsive" src="{{ asset('assets/img/istruzioni-dev/pagina-elenco-ricerca.png') }}" data-action="zoom" alt="clicca per zoomare">
                    </div>
                </div>

                {# FORM #}
                <div class="col-sm-4 p30">
                    <h3>
                        <span class="badge badge-warning badge-lg">2</span>
                        Pagine con Form
                    </h3>
                    <div class="thumbnail">
                        <img class="img-responsive" src="{{ asset('assets/img/istruzioni-dev/pagina-form.png') }}" data-action="zoom" alt="clicca per zoomare">
                    </div>
                </div>

                {# MESSAGGI #}
                <div class="col-sm-4 p30">
                    <h3>
                        <span class="badge badge-warning badge-lg">3</span>
                        Pagine con Messaggi
                    </h3>
                    <div class="thumbnail">
                        <img class="img-responsive" src="{{ asset('assets/img/istruzioni-dev/pagina-messaggi-di-azione.png') }}" data-action="zoom" alt="clicca per zoomare">
                    </div>
                </div>

                {# DETAGLI #}
                <div class="col-sm-4 p30">
                    <h3>
                        <span class="badge badge-warning badge-lg">3</span>
                        Pagine Riepilogo
                    </h3>
                    <div class="thumbnail">
                        <img class="img-responsive" src="{{ asset('assets/img/istruzioni-dev/pagina-riepilogo-dettaglio.png') }}" data-action="zoom" alt="clicca per zoomare">
                    </div>
                </div>

            </div>
        </div>

    {% else %}

        {#% if soggettiNoPec|length != 0 %}

                 <table class="table alert alert-danger" id="avviso_segnalazioni">
            <tbody>

            <tr><td>

                    <h3><strong>ATTENZIONE:</strong> </h3>
                    Per le seguenti entita' legali inserite:<br><br>

                    <strong>
                    {% for soggetto in soggettiNoPec %}

                        {{soggetto.denominazione}} <br><br>

                    {% endfor %}
                    </strong>

                    non risulta impostato nessun <strong>indirizzo email PEC</strong>. E' necessario provvedere immediatamente al suo inserimento.<br><br>
            </td></tr>
            </tbody>
        </table>

        {% endif %#}

        {#<div class="alert alert-warning">
            <strong>ATTENZIONE: BANDO PER IL SOSTEGNO AGLI INVESTIMENTI DELLE IMPRESE OPERANTI NELLE ATTIVITA RICETTIVE E TURISTICO RICREATIVE - DGR 921/2019 - RIAPERTURA 2a FINESTRA</strong>
            <br>
            Le richieste di contributo create ma non inviate durante la seconda finestra saranno editabili.
        </div>#}

        {#% if comunicazioniIntegrazioneNonLetteBandoIrap.getTotalItemCount > 0 %}
            <h1>Risposte alle comunicazioni di integrazione in arrivo (bando IRAP)</h1>
    
            <div>
                <div class="count">
                    Numero elementi: {{ comunicazioniIntegrazioneNonLetteBandoIrap.getTotalItemCount }}<br>
                    Sono elencate le risposte non lette alle proprie comunicazioni (per proprie si intente dell'utente che ha invito la comunicazione di integrazione).
                </div>
                <table class="table table-striped table-hover table-bordered" id="richieste-elenco">
                    <thead>
                    <tr>
                        <th>Id Richiesta</th>
                        <th>Soggetto</th>
                        <th>Data risposta</th>
                        <th>Protocollo risposta</th>
                        <th>Azioni</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for comunicazioneIntegrazioneNonLetta in comunicazioniIntegrazioneNonLetteBandoIrap %}
                        <tr>
                            <td>{{ comunicazioneIntegrazioneNonLetta.richiesta.id }}</td>
                            <td>{{ comunicazioneIntegrazioneNonLetta.richiesta.soggetto.denominazione|capitalize }}</td>
                            <td>{{ comunicazioneIntegrazioneNonLetta.risposta is null or comunicazioneIntegrazioneNonLetta.risposta.data is null ? "-" : comunicazioneIntegrazioneNonLetta.risposta.data | date('d/m/Y') }}</td>
                            <td>{{ comunicazioneIntegrazioneNonLetta.risposta.protocolloRispostaIntegrazione }}</td>
                            <td>
                                <div class="dropdown">
                                    <button class="btn btn-info dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                        Azioni
                                        <span class="caret"></span>
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
                                        <li>
                                            <a href="{{ path("dettaglio_integrazione_istruttoria_pa", {'id_integrazione_istruttoria': comunicazioneIntegrazioneNonLetta.id, 'da_comunicazione': true}) }}">
                                                Vai alla comunicazione
                                            </a>
                                            <a href="{{ path("imposta_risposta_integrazione_come_letta", {'id_integrazione_istruttoria': comunicazioneIntegrazioneNonLetta.id, '_token' : token }) }}">
                                                Imposta come letta
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
        {% endif %}


        {% if comunicazioniIntegrazioneNonLetteSecondoBandoIrap.getTotalItemCount > 0 %}
            <h1>Risposte alle comunicazioni di integrazione in arrivo (Secondo bando IRAP)</h1>

            <div>
                <div class="count">
                    Numero elementi: {{ comunicazioniIntegrazioneNonLetteSecondoBandoIrap.getTotalItemCount }}<br>
                    Sono elencate le risposte non lette alle proprie comunicazioni (per proprie si intente dell'utente che ha invito la comunicazione di integrazione).
                </div>
                <table class="table table-striped table-hover table-bordered" id="richieste-elenco">
                    <thead>
                    <tr>
                        <th>Id Richiesta</th>
                        <th>Soggetto</th>
                        <th>Data risposta</th>
                        <th>Protocollo risposta</th>
                        <th>Azioni</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for comunicazioneIntegrazioneNonLetta in comunicazioniIntegrazioneNonLetteSecondoBandoIrap %}
                        <tr>
                            <td>{{ comunicazioneIntegrazioneNonLetta.richiesta.id }}</td>
                            <td>{{ comunicazioneIntegrazioneNonLetta.richiesta.soggetto.denominazione|capitalize }}</td>
                            <td>{{ comunicazioneIntegrazioneNonLetta.risposta is null or comunicazioneIntegrazioneNonLetta.risposta.data is null ? "-" : comunicazioneIntegrazioneNonLetta.risposta.data | date('d/m/Y') }}</td>
                            <td>{{ comunicazioneIntegrazioneNonLetta.risposta.protocolloRispostaIntegrazione }}</td>
                            <td>
                                <div class="dropdown">
                                    <button class="btn btn-info dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                        Azioni
                                        <span class="caret"></span>
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
                                        <li>
                                            <a href="{{ path("dettaglio_integrazione_istruttoria_pa", {'id_integrazione_istruttoria': comunicazioneIntegrazioneNonLetta.id, 'da_comunicazione': true}) }}">
                                                Vai alla comunicazione
                                            </a>
                                            <a href="{{ path("imposta_risposta_integrazione_come_letta", {'id_integrazione_istruttoria': comunicazioneIntegrazioneNonLetta.id, '_token' : token }) }}">
                                                Imposta come letta
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
        {% endif %#}
        
{#        {% if isSuperAdminIrap %}#}
{#            <a class="btn btn-primary"  href="{{ path("esportazione_cruscotto_comunicazioni_istruttoria", {'id_procedura': 118, '_token' : token }) }}">#}
{#                Esportazione comunicazioni di integrazione Bando IRAP#}
{#            </a>#}

{#            <a class="btn btn-primary"  href="{{ path("esportazione_cruscotto_comunicazioni_istruttoria", {'id_procedura': 125, '_token' : token }) }}">#}
{#                Esportazione comunicazioni di integrazione Secondo Bando IRAP#}
{#            </a>#}
{#        {% endif %}#}
        
        {# Contatori #}
        {% include '@Sfinge/Default/contatoreProcedura.html.twig' %}

        <h1>
            Notizie
        </h1>
        {% if notizie|length == 0 %}
            <h4><span class="label label-success"></span> Nessuna Notizia </h4>
        {% endif %}
        {% for notizia in notizie %}
            <div>
                <h4><span class="label label-success">{{notizia.datainserimento|date("d/m/Y")}}</span> {{notizia.titolo}}<br><br>{{notizia.testo|raw}}</h4>
                
            </div>
        {% endfor %}
    {% endif %}

{% endblock %}
