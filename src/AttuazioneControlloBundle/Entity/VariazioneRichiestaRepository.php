<?php

namespace AttuazioneControlloBundle\Entity;

use Doctrine\ORM\EntityRepository;
use AttuazioneControlloBundle\Entity\StatoVariazione;
use SfingeBundle\Entity\Procedura;
use RichiesteBundle\Entity\SezionePianoCosto;
/**
 * VariazioneRichiestaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VariazioneRichiestaRepository extends EntityRepository
{
    /**
     * @todo: da completare, filtrare solo per quelle in istruttoria
     */
    public function getVariazioniInIstruttoria($ricerca) {

		$dql = "SELECT var "
                . "FROM AttuazioneControlloBundle:VariazioneRichiesta var "
                . "JOIN var.attuazione_controllo_richiesta ac "
                . "JOIN ac.richiesta rich "
				. "JOIN var.stato s "
				. "JOIN rich.procedura proc "
				. "LEFT JOIN rich.istruttoria i "
				. "LEFT JOIN rich.proponenti prop "
				. "LEFT JOIN rich.richieste_protocollo rp "
				. "LEFT JOIN prop.soggetto_version sv "
				. "LEFT JOIN proc.stato_procedura proc_s "
				. "JOIN proc.asse asse "			
				. "WHERE s.codice = 'VAR_PROTOCOLLATA' "
				;
		
		$q = $this->getEntityManager()->createQuery();
		
		$utente = $ricerca->getUtente();
		if (!is_null($utente)) {
			
			if (!$utente->hasRole("ROLE_SUPER_ADMIN")) {

				if (!$utente->hasRole("ROLE_ADMIN_PA")) {
					$dql .= " AND ( ";
					$dql .= "proc.id in (select proc3.id from SfingeBundle:PermessiProcedura proc2 join proc2.procedura proc3 where proc2.utente={$utente->getId()}) ";
					$dql .= "OR proc.asse in (select asse3.id from SfingeBundle:PermessiAsse asse2 join asse2.asse asse3 where asse2.utente={$utente->getId()}))";
			}
			}
		}

		if (!is_null($ricerca->getProcedura())) {
			$dql .= " AND proc.id = :procedura ";
			$q->setParameter("procedura", $ricerca->getProcedura());		
		}
		
		if (!is_null($ricerca->getCompletata())) {
			if ($ricerca->getCompletata()) {
				$dql .= " AND var.esito_istruttoria is not null ";
			} else {
				$dql .= " AND var.esito_istruttoria is null ";
			}
		}
		
		if (!is_null($ricerca->getCodiceFiscale())) {
			$dql .= " AND sv.codice_fiscale LIKE :cf ";
			$q->setParameter("cf", "%".$ricerca->getCodiceFiscale()."%");	
		}
		
		if (!is_null($ricerca->getDenominazione())) {
			$dql .= " AND sv.denominazione LIKE :denominazione ";
			$q->setParameter("denominazione", "%".$ricerca->getDenominazione()."%");	
		}
		
		if (!is_null($ricerca->getProtocollo())) {
			$dql .= "AND CONCAT(rp.registro_pg, '/' , rp.anno_pg , '/' , rp.num_pg) LIKE :protocollo ";
			$q->setParameter("protocollo", "%".$ricerca->getProtocollo()."%");	
		}
		
		$dql .= " ORDER BY var.data_invio DESC ";
		
		$q->setDQL($dql);


		return $q;
	}
	
	public function getVariazioniInviatePA() {

		$query = $this->getEntityManager()
				->createQuery(
						'SELECT v.id
				  FROM AttuazioneControlloBundle:VariazioneRichiesta v
				  JOIN v.stato s WITH s.codice = :value
				  JOIN v.attuazione_controllo_richiesta atr
				  JOIN atr.richiesta r
				  JOIN r.procedura p 
				  WHERE v.id NOT IN 
					 (SELECT vv.id
					  FROM ProtocollazioneBundle:RichiestaProtocolloVariazione rpv
					  JOIN rpv.variazione vv)
				  ORDER BY v.data_invio ASC'
				)
				->setParameter('value', StatoVariazione::VAR_INVIATA_PA);
	
		$result = $query->getResult();

		return $result;
	}

	/**
	 * @param Procedura $procedura
	 * @return array
	 */
	public function iterateVariazioni(Procedura $procedura)
	{
		$dql = 'select variazione, istruttoria_variazione, atc, richiesta, istruttoria, variazione_protocollo, proponenti, soggetto_version, occupazione, soggetto, richiesta_protocollo, nucleoIstruttoria '
		.'from AttuazioneControlloBundle:VariazionePianoCosti variazione '
			.'join variazione.attuazione_controllo_richiesta atc '
			.'join atc.richiesta richiesta '
			.'JOIN richiesta.istruttoria istruttoria '
			.'left join istruttoria.nucleoIstruttoria nucleoIstruttoria '
			.'join richiesta.procedura procedura '
			.'left join variazione.richieste_protocollo variazione_protocollo '	
			.'join richiesta.richieste_protocollo richiesta_protocollo '	//OneTOMany
			.'join richiesta.proponenti proponenti '	//OneTOMany
			.'left join proponenti.soggetto_version soggetto_version '
			.'left join proponenti.occupazione occupazione '
			.'join proponenti.soggetto soggetto '
            .'join variazione.stato st '
			.'left join variazione.istruttoria_variazione istruttoria_variazione '
		."where procedura = :procedura and coalesce(variazione.ignora_variazione,0) = 0 and st.codice = 'VAR_PROTOCOLLATA' "
 			;

		return $this
			->getEntityManager()
			->createQuery($dql)
			->setParameter('procedura', $procedura)
			->getResult();
	}
        
        public function iterateVariazioniGenerale(Procedura $procedura)
	{
		$dql = 'select variazione, istruttoria_variazione, atc, richiesta, istruttoria, variazione_protocollo, proponenti, soggetto_version, occupazione, soggetto, richiesta_protocollo, nucleoIstruttoria '
		.'from AttuazioneControlloBundle:VariazioneRichiesta variazione '
			.'join variazione.attuazione_controllo_richiesta atc '
			.'join atc.richiesta richiesta '
			.'JOIN richiesta.istruttoria istruttoria '
			.'left join istruttoria.nucleoIstruttoria nucleoIstruttoria '
			.'join richiesta.procedura procedura '
			.'left join variazione.richieste_protocollo variazione_protocollo '	
			.'join richiesta.richieste_protocollo richiesta_protocollo '	//OneTOMany
			.'join richiesta.proponenti proponenti '	//OneTOMany
			.'left join proponenti.soggetto_version soggetto_version '
			.'left join proponenti.occupazione occupazione '
			.'join proponenti.soggetto soggetto '
            .'join variazione.stato st '
			.'left join variazione.istruttoria_variazione istruttoria_variazione '
		."where procedura = :procedura and coalesce(variazione.ignora_variazione,0) = 0 and st.codice = 'VAR_PROTOCOLLATA' "
 			;

		return $this
			->getEntityManager()
			->createQuery($dql)
			->setParameter('procedura', $procedura)
			->getResult();
	}

	/**
	 * @param VariazioneRichiesta $variazione
	 * @return array
	 */
	public function getCostiVariazione(VariazioneRichiesta $variazione)
	{
		
		// 	SUM( COALESCE(voce_piano.importo_anno_1, 0)) + 
		// 	SUM( COALESCE(voce_piano.importo_anno_2, 0)) +
		// 	SUM( COALESCE(voce_piano.importo_anno_3, 0)) +
		// 	SUM( COALESCE(voce_piano.importo_anno_4, 0)) +
		// 	SUM( COALESCE(voce_piano.importo_anno_5, 0)) +
		// 	SUM( COALESCE(voce_piano.importo_anno_6, 0)) +
		// 	SUM( COALESCE(voce_piano.importo_anno_7, 0)) as importo_richiesta
		
		// SUM( COALESCE(voci_variazione.importo_variazione_anno_1, 0)) +
		// 	SUM( COALESCE(voci_variazione.importo_variazione_anno_2, 0)) +
		// 	SUM( COALESCE(voci_variazione.importo_variazione_anno_3, 0)) +
		// 	SUM( COALESCE(voci_variazione.importo_variazione_anno_4, 0)) +
		// 	SUM( COALESCE(voci_variazione.importo_variazione_anno_5, 0)) +
		// 	SUM( COALESCE(voci_variazione.importo_variazione_anno_6, 0)) +
		// 	SUM( COALESCE(voci_variazione.importo_variazione_anno_7, 0)) as importo_variazione,
		
		$dql = "SELECT 
				SUM( COALESCE(voci_variazione.importo_approvato_anno_1, 0)) +
				SUM( COALESCE(voci_variazione.importo_approvato_anno_2, 0)) +
				SUM( COALESCE(voci_variazione.importo_approvato_anno_3, 0)) +
				SUM( COALESCE(voci_variazione.importo_approvato_anno_4, 0)) +
				SUM( COALESCE(voci_variazione.importo_approvato_anno_5, 0)) +
				SUM( COALESCE(voci_variazione.importo_approvato_anno_6, 0)) +
				SUM( COALESCE(voci_variazione.importo_approvato_anno_7, 0)) as importo_approvato,
			
			SUM( COALESCE(voci_variazione.importo_variazione_anno_1, 0)) as importo_variazione_anno_1,
			SUM( COALESCE(voci_variazione.importo_variazione_anno_2, 0)) as importo_variazione_anno_2,
			SUM( COALESCE(voci_variazione.importo_approvato_anno_1, 0)) as importo_variazione_approvato_anno_1,
			SUM( COALESCE(voci_variazione.importo_approvato_anno_2, 0)) as importo_variazione_approvato_anno_2

		 	FROM AttuazioneControlloBundle:VariazionePianoCosti variazione 
		 	JOIN variazione.voci_piano_costo voci_variazione
			JOIN voci_variazione.voce_piano_costo voce_piano
			JOIN voce_piano.piano_costo piano_costo
			WHERE variazione = :variazione
				AND piano_costo.codice <> 'TOT'
		 ";

		 return $this
			->getEntityManager()
			->createQuery($dql)
			->setMaxResults(1)
			->setParameter('variazione', $variazione)
			->getOneOrNullResult();		 
	}



	public function getVociVariazioneAggregate(Procedura $procedura, ?SezionePianoCosto $sezione, string $anno): array
	{

		$dql = "SELECT pc.titolo, 
				SUM(
					COALESCE(ipvc.importo_ammissibile_anno_$anno, 0)
				) AS costo_ammesso,
				SUM(
					COALESCE(vpca.importo_approvato_anno_$anno, 0)
				) AS importo_approvato
				
			FROM AttuazioneControlloBundle:VariazioneRichiesta AS variazione
			INNER JOIN variazione.attuazione_controllo_richiesta AS atc
			INNER JOIN atc.richiesta AS richiesta
			INNER JOIN richiesta.procedura AS procedura
			INNER JOIN variazione.voci_piano_costo AS vpca
			INNER JOIN vpca.voce_piano_costo AS vpc
			INNER JOIN vpc.istruttoria AS ipvc
			INNER JOIN vpc.piano_costo AS pc
			INNER JOIN pc.sezione_piano_costo as spc
			WHERE spc = COALESCE(:spc, spc)
			GROUP BY pc.titolo, pc.ordinamento
			ORDER BY pc.ordinamento
		";

		return $this->getEntityManager()
				->createQuery($dql)
				->setParameter('spc', $sezione)
				->getResult();
	}
}
