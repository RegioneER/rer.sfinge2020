<?php

namespace AttuazioneControlloBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * GiustificativoPagamentoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GiustificativoPagamentoRepository extends EntityRepository {

    public function getGiustificativiInUniverso(\AuditBundle\Form\Entity\RicercaUniversoGiustificativi $ricercaUniverso) {

        $dql = "SELECT gp FROM AttuazioneControlloBundle:GiustificativoPagamento gp "
                . "LEFT JOIN gp.pagamento pag "
                . "LEFT JOIN pag.attuazione_controllo_richiesta atc "
                . "LEFT JOIN atc.richiesta rich "
                . "JOIN pag.certificazioni cert "
                . "LEFT JOIN cert.certificazione c "
                . "WHERE 1=1 "
        ;

        $q = $this->getEntityManager()->createQuery();

        if (!is_null($ricercaUniverso->getRichiesta())) {
            $dql .= " AND rich.id = :richiesta ";
            $q->setParameter("richiesta", $ricercaUniverso->getRichiesta()->getId());
        }


        if (!is_null($ricercaUniverso->getCertificazione())) {
            $certificazioni = $ricercaUniverso->getCertificazione();
            $certificazioni_ids = array();
            foreach ($certificazioni as $certificazione) {
                $certificazioni_ids[] = $certificazione->getId();
            }
            if (count($certificazioni_ids)) {
                $dql .= " AND cert.certificazione IN ('" . implode("','", $certificazioni_ids) . "') ";
            }
        }

        $q->setDQL($dql);

        return $q;
    }

    public function getGiustificativiBando8ByPagamento($pagamentoId, $proponenteId) {

        if (is_null($proponenteId)) {
            $where = "AND g.proponente IS NULL ";
        } else {
            $where = "AND g.proponente = {$proponenteId} ";
        }

        $dql = "SELECT g FROM AttuazioneControlloBundle:GiustificativoPagamento g "
                . "WHERE g.pagamento = {$pagamentoId} " . $where
                . "ORDER BY g.tipologia_giustificativo";

        $q = $this->getEntityManager()->createQuery();
        $q->setDQL($dql);

        return $q->getResult();
    }

    public function getGiustificativiByPagamento($pagamentoId, $proponenteId = null) {

        $where = '';
        if (!is_null($proponenteId)) {
            $where = "AND g.proponente = {$proponenteId} ";
        }

        $dql = "SELECT g FROM AttuazioneControlloBundle:GiustificativoPagamento g "
                . "LEFT JOIN g.tipologia_giustificativo tip "
                . "WHERE g.pagamento = {$pagamentoId} AND (tip.invisibile is null OR tip.invisibile = 0) " . $where
                . "ORDER BY g.proponente, g.tipologia_giustificativo";

        $q = $this->getEntityManager()->createQuery();
        $q->setDQL($dql);

        return $q->getResult();
    }

    public function getGiustificativiByContratto($contrattoId, $proponenteId = null) {

        $where = '';
        if (!is_null($proponenteId)) {
            $where = "AND g.proponente = {$proponenteId} ";
        }

        $dql = "SELECT g FROM AttuazioneControlloBundle:GiustificativoPagamento g "
                . "LEFT JOIN g.tipologia_giustificativo tip "
                . "WHERE g.contratto = {$contrattoId} AND (tip.invisibile is null OR tip.invisibile = 0) " . $where
                . "ORDER BY g.proponente, g.tipologia_giustificativo";

        $q = $this->getEntityManager()->createQuery();
        $q->setDQL($dql);

        return $q->getResult();
    }

    /*
     * faccio una repository che ottimizza il fetch dei dati perchÃ¨ ci stava troppo a farlo nel twig
     * inoltre chiedono di mettere gli eventuali giustificativi relativi alle spese generali in coda per cui..
     */

    public function getGiustificativiByPagamentoPerPdfDomandaPagamento($pagamentoId, $proponenteId = null) {

        $where = '';
        if (!is_null($proponenteId)) {
            $where = "AND g.proponente = {$proponenteId} ";
        }

        $q = $this->getEntityManager()->createQuery();

        $dqlVisibili = "SELECT g.denominazione_fornitore, "
                . "g.codice_fiscale_fornitore, "
                . "tip.descrizione as tipologia_giustificativo, "
                . "g.numero_giustificativo, g.data_giustificativo, "
                . "g.importo_giustificativo, "
                . "g.importo_richiesto, "
                . "sogg.denominazione as proponente "
                . "FROM AttuazioneControlloBundle:GiustificativoPagamento g "
                . "LEFT JOIN g.tipologia_giustificativo tip "
                . "LEFT JOIN g.proponente prop "
                . "LEFT JOIN prop.soggetto sogg "
                . "WHERE g.pagamento = {$pagamentoId} AND (tip.invisibile is null OR tip.invisibile = 0) " . $where
                . "ORDER BY g.proponente, g.tipologia_giustificativo";

        $q->setDQL($dqlVisibili);
        $giustificativiVisibili = $q->getResult();

        $dqlInvisibiliSpeseGenerali = "SELECT g.denominazione_fornitore, "
                . "g.codice_fiscale_fornitore, "
                . "tip.descrizione as tipologia_giustificativo, "
                . "g.numero_giustificativo, "
                . "g.data_giustificativo, "
                . "g.importo_giustificativo, "
                . "g.importo_richiesto, "
                . "sogg.denominazione as proponente "
                . "FROM AttuazioneControlloBundle:GiustificativoPagamento g "
                . "LEFT JOIN g.tipologia_giustificativo tip "
                . "LEFT JOIN g.proponente prop "
                . "LEFT JOIN prop.soggetto sogg "
                . "WHERE g.pagamento = {$pagamentoId} AND tip.invisibile = 1 " . $where
                . "ORDER BY g.proponente, g.tipologia_giustificativo";

        $q->setDQL($dqlInvisibiliSpeseGenerali);
        $giustificativiInvisibiliSpeseGenerali = $q->getResult();

        return array_merge($giustificativiVisibili, $giustificativiInvisibiliSpeseGenerali);
    }

    public function estrazioneGiustifictiviRichiesta($id_richiesta) {

        $dql = "SELECT gp FROM AttuazioneControlloBundle:GiustificativoPagamento gp "
                . "JOIN gp.pagamento pag "
                . "JOIN pag.attuazione_controllo_richiesta atc "
                . "JOIN atc.richiesta rich "
                . "WHERE rich.id = {$id_richiesta} "
        ;

        $q = $this->getEntityManager()->createQuery();
        $q->setDQL($dql);

        return $q->getResult();
    }

    public function getGiustificativiByProcedura($id_procedura) {


        $dql = "SELECT g as giustificativo, "
                . "pag.id as id_pagamento, "
                . "tip.descrizione as tipo_giustificativo, "
                . "g.descrizione_giustificativo as descrizione, "
                . "g.numero_giustificativo as numero, "
                . "g.importo_giustificativo as importo, "
                . "DATE_FORMAT(g.data_giustificativo, '%d-%m-%Y') as data, "
                . "g.importo_richiesto as importo_contributo, "
                . "g.nota_integrazione as nota_integrazione, "
                . "g.importo_approvato as importo_app "
                . "FROM AttuazioneControlloBundle:GiustificativoPagamento g "
                . "JOIN g.pagamento pag "
                . "JOIN pag.attuazione_controllo_richiesta atc "
                . "JOIN atc.richiesta rich "
                . "JOIN rich.procedura proc "
                . "JOIN proc.asse asse "
                . "LEFT JOIN g.tipologia_giustificativo tip "
                . "WHERE asse.id <> 8 ";
        ;

        if ($id_procedura != 'all') {
            $dql .= " AND proc.id = {$id_procedura} ";
        }

        $q = $this->getEntityManager()->createQuery();
        $q->setDQL($dql);

        return $q->getResult();
    }

    public function getGiustificativiByPagamentoRinviati($pagamentoId, $proponenteId = null) {

        $where = '';
        if (!is_null($proponenteId)) {
            $where = "AND g.proponente = {$proponenteId} ";
        }

        $dql = "SELECT g FROM AttuazioneControlloBundle:GiustificativoPagamento g "
                . "LEFT JOIN g.tipologia_giustificativo tip "
                . "WHERE g.pagamento = {$pagamentoId} AND (tip.invisibile is null OR tip.invisibile = 0) AND g.giustificativo_origine IS NOT NULL " . $where
                . "ORDER BY g.proponente, g.tipologia_giustificativo";

        $q = $this->getEntityManager()->createQuery();
        $q->setDQL($dql);

        return $q->getResult();
    }

    public function getGiustificativiByContrattoPerPdfDomandaPagamento($contrattoId) {

        $where = '';
        $q = $this->getEntityManager()->createQuery();

        $dqlNonPrecedente = "SELECT g.denominazione_fornitore, "
                . "g.codice_fiscale_fornitore, "
                . "tip.descrizione as tipologia_giustificativo, "
                . "g.numero_giustificativo, g.data_giustificativo, "
                . "g.importo_giustificativo, "
                . "g.importo_richiesto, "
                . "sogg.denominazione as proponente "
                . "FROM AttuazioneControlloBundle:GiustificativoPagamento g "
                . "LEFT JOIN g.tipologia_giustificativo tip "
                . "LEFT JOIN g.proponente prop "
                . "LEFT JOIN prop.soggetto sogg "
                . "WHERE g.contratto = {$contrattoId} AND g.giustificativo_origine is null " . $where
                . "ORDER BY g.proponente, g.tipologia_giustificativo";

        $q->setDQL($dqlNonPrecedente);
        $giustificativiNonPrecedente = $q->getResult();

        return $giustificativiNonPrecedente;
    }

    public function getGiustificativiPrecedentePerPdfDomandaPagamento($pagamentoId) {

        $where = '';
        $q = $this->getEntityManager()->createQuery();

        $dqlPrecedente = "SELECT g.denominazione_fornitore, "
                . "g.codice_fiscale_fornitore, "
                . "tip.descrizione as tipologia_giustificativo, "
                . "g.numero_giustificativo, g.data_giustificativo, "
                . "g.importo_giustificativo, "
                . "g.importo_richiesto, "
                . "sogg.denominazione as proponente "
                . "FROM AttuazioneControlloBundle:GiustificativoPagamento g "
                . "LEFT JOIN g.tipologia_giustificativo tip "
                . "LEFT JOIN g.proponente prop "
                . "LEFT JOIN prop.soggetto sogg "
                . "WHERE g.pagamento = {$pagamentoId} AND g.giustificativo_origine is not null " . $where
                . "ORDER BY g.proponente, g.tipologia_giustificativo";

        $q->setDQL($dqlPrecedente);
        $giustificativiPrecedente = $q->getResult();
        
        return $giustificativiPrecedente;
    }

}
