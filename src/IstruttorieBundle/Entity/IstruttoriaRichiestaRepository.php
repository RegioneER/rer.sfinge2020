<?php

namespace IstruttorieBundle\Entity;

use Doctrine\ORM\EntityRepository;
use RichiesteBundle\Entity\Richiesta;
use IstruttorieBundle\Entity\IstruttoriaRichiesta;

/**
 * IstruttoriaRichiestaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IstruttoriaRichiestaRepository extends EntityRepository {

    public function findIstruttoriaByEsitoCupBatchArray($id_progetto, $codifica_locale, $codice_cup_null = true) {
        /* @var $IstruttoriaRichiesta IstruttoriaRichiesta */
        $IstruttoriaRichiesta = null;
        $criteria = "r.id = :id_progetto";
        if ($codice_cup_null)
            $criteria.=" AND ir.codice_cup IS NULL";
        $dql = "SELECT ir
                     FROM IstruttorieBundle:IstruttoriaRichiesta ir
                     JOIN ir.richiesta r
                     WHERE $criteria";
        $query = $this->getEntityManager()->createQuery($dql);

        $query->setParameters(array(
            'id_progetto' => $id_progetto,
                )
        );



        $results = $query->getResult();
        if (count($results) > 1)
            throw new \Exception("esistono piÃ¹ richieste con id_progetto = :[$id_progetto]");

        if (count($results) > 0) {
            $IstruttoriaRichiesta = $results[0];
            /* @var $Richiesta Richiesta */
            $Richiesta = $IstruttoriaRichiesta->getRichiesta();
            $protocollo = $Richiesta->getProtocollo();
            if ($protocollo != $codifica_locale)
                $IstruttoriaRichiesta = null;
        }

        return $IstruttoriaRichiesta;
    }

    public function getElementiCheckList($id_istruttoria, $id_checklist) {
        $dql = "SELECT ec.id as id, ec.descrizione as elemento,ve.valore_raw as valore,ve.commento as note ,sc.descrizione as sezione, ec.note as note_elemento, ec.codice
                     FROM IstruttorieBundle:IstruttoriaRichiesta ir
                     JOIN ir.valutazioni_checklist vc
                     JOIN vc.checklist c
                     JOIN vc.valutazioni_elementi ve
                     JOIN ve.elemento ec
                     JOIN ec.sezione_checklist sc
                     WHERE ir.id = $id_istruttoria AND c.id = $id_checklist 
                     ORDER BY sc.ordinamento";
        $query = $this->getEntityManager()->createQuery();
        $query->setDQL($dql);

        return $query->getResult();
    }
    
    public function getElementiCheckListProponente($id_istruttoria, $id_checklist, $id_proponente) {
        $dql = "SELECT ec.id as id, ec.descrizione as elemento,ve.valore_raw as valore,ve.commento as note ,sc.descrizione as sezione, ec.note as note_elemento, ec.codice, prop.id
                     FROM IstruttorieBundle:IstruttoriaRichiesta ir
                     JOIN ir.valutazioni_checklist vc
                     JOIN vc.proponente prop
                     JOIN vc.checklist c
                     JOIN vc.valutazioni_elementi ve
                     JOIN ve.elemento ec
                     JOIN ec.sezione_checklist sc
                     WHERE ir.id = $id_istruttoria AND c.id = $id_checklist AND prop.id = $id_proponente
                     ORDER BY sc.ordinamento";
        $query = $this->getEntityManager()->createQuery();
        $query->setDQL($dql);

        return $query->getResult();
    }

    /**
     * @param int $id_checklist
     * @return array
     */
    public function getTemplateElementiCheckList(int $id_checklist) {
        $dql = "SELECT s.descrizione AS sezione, e.descrizione AS elemento, e.note AS note_elemento, e.codice AS codice_elemento
                FROM IstruttorieBundle:ElementoChecklistIstruttoria AS e
                JOIN e.sezione_checklist AS s
                WHERE s.checklist = $id_checklist 
                ORDER BY s.ordinamento";
        $query = $this->getEntityManager()->createQuery();
        $query->setDQL($dql);

        return $query->getResult();
    }
    
    // occorre aver assegnato un codice a db all'elemento della checklist 
    public function getValutazioneElementoCheckListByCodice($istruttoriaId, $checklistId, $elementoChecklistCodice) {
        $dql = "SELECT ve "
                . "FROM IstruttorieBundle:ValutazioneElementoChecklistIstruttoria ve "
                . "JOIN ve.valutazione_checklist vc "
                . "JOIN vc.checklist c "
                . "JOIN ve.elemento ec "
                . "JOIN vc.istruttoria i "
                //. "JOIN ec.sezione_checklist sc "
                . "WHERE i.id = {$istruttoriaId} AND c.id = {$checklistId} AND ec.codice = '{$elementoChecklistCodice}' ";
                     
        $query = $this->getEntityManager()->createQuery();
                
        $query->setDQL($dql);
        //$deb = $query->getSQL();
        
        $res = $query->getResult();
        return count($res) > 0 ? $res[0] : null;
    }

    /**
     * @param int $procedura_id
     * @param bool $ammesse
     * @return array|int|string
     */
    public function getIstruttoriePerBando(int $procedura_id, bool $ammesse = false)
    {
        $q = $this->getEntityManager()->createQuery();
        $dql = "SELECT istruttoria "
            . "FROM IstruttorieBundle:IstruttoriaRichiesta istruttoria "
            . "JOIN istruttoria.richiesta richiesta "
            . "LEFT JOIN istruttoria.esito esito "
            . "WHERE richiesta.procedura = :procedura_id"
        ;

        if ($ammesse) {
            $dql .= " AND esito.codice = :codice ";
            $q->setParameter("codice", EsitoIstruttoria::AMMESSO);
        }

        $q->setParameter("procedura_id", $procedura_id);
        $q->setDQL($dql);
        return $q->getResult();
    }
}
